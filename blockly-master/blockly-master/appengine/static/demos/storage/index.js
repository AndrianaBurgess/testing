const BEAGLE_BONE_SERVER_URL = 'https://192.168.7.2:5050';

/**
 * Tests if name is a good game.
 * @param {String} workspaceName name of workspace
 * @returns {boolean} true if valid. false otherwise
 */
async function isValidName(workspaceName) {
    const is_used = await WorkspaceStorage.doesExist(workspaceName);
    const is_empty = workspaceName !== '';
    return !is_empty && !is_used;
}

/**
 * Stores workspace in database
 */
function saveWorkspace() {
    const workspace = {
        xmlWorkspace : getWorkspaceAsXml(),
        workspaceName : getCurrentWorkspaceName()
    };
    WorkspaceStorage.put(workspace);
}

/**
 * Converts the current workspace into a string
 * in xml format
 * @returns {String} xml representation of workspace
 */
function getWorkspaceAsXml() {
    const workspace = Blockly.getMainWorkspace();
    const domWorkspace = Blockly.Xml.workspaceToDom(workspace);
    const xmlWorkspace = Blockly.Xml.domToText(domWorkspace);
    return xmlWorkspace;
}

function getCurrentWorkspaceName() { /** TODO */ }

/**
 * Loads workspace from database onto the screen
 * @param {String} workspaceName name of workspace
 */
async function loadWorkspace(workspaceName) {
    const xmlWorkspace = await WorkspaceStorage.get(workspaceName);
    const domWorkspace = Blockly.Xml.textToDom(xmlWorkspace);
    const currWorkspace = Blockly.getMainWorkspace();
    currWorkspace.clear();
    Blockly.Xml.domToWorkspace(domWorkspace, currWorkspace);
}

/**
 * Sends code generated by current workspace
 * to the beaglebone.
 * @returns {String} message from the beaglebone server.
 */
async function executeCodeOnBeagleBone(){
    const requestSettings = getBeagleBoneRequestSettings();
    const respone = await fetch(BEAGLE_BONE_SERVER_URL, requestSettings);
    const jsonData = await respone.json();
    return jsonData[ 'message' ];
}

/**
 * Returns settings object that contains configurations for the
 * request.
 * @returns {object} object consisting of method key and body key
 */
function getBeagleBoneRequestSettings() {
    const javascriptCode = Blockly.JavaScript.workspaceToCode(demoWorkspace);
    return {
        method: 'POST',
        body: javascriptCode
    };
}

async function loadWorkspaceNames() {  /** TODO */ }

function init(){
    const saveWorkspaceButton = document.getElementById('save');
    saveWorkspaceButton.addEventListener('click', saveWorkspace);

    const stuff = {
        media: '../../media/',
        toolbox: document.getElementById('toolbox')
    }
    const demoWorkspace = Blockly.inject('blocklyDiv', stuff); // load blockly ide
}

window.addEventListener("load", init);